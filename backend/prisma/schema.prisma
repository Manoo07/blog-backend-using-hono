// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  firstName  String
  lastName   String
  password   String
  posts      Post[]
  followers  Follower[] @relation("UserFollowers")
  following  Follower[] @relation("UserFollowing")
  likes      Like[]
  comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt @default(now())
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  published  Boolean   @default(false)
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt @default(now())
  likes      Like[]
  comments   Comment[]
}

model Follower {
  id         String   @id @default(uuid())
  followerId String
  followingId String
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])
  following  User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt  DateTime @default(now())
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  postId     String
  user       User     @relation(fields: [userId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  createdAt  DateTime @default(now())
  @@unique([userId, postId])
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  postId      String
  post        Post      @relation(fields: [postId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  parentId    String?   // Self-relation field for replies
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
}

